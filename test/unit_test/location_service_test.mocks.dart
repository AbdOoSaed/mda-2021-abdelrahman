// Mocks generated by Mockito 5.0.16 from annotations
// in gas_station_finder/test/unit_test/location_service_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:gas_station_finder/services/location_service.dart' as _i2;
import 'package:geolocator/geolocator.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [GeoLocatorWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeoLocatorWrapper extends _i1.Mock implements _i2.GeoLocatorWrapper {
  MockGeoLocatorWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> isLocationServiceEnabled() =>
      (super.noSuchMethod(Invocation.method(#isLocationServiceEnabled, []),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<_i4.LocationPermission> checkPermission() =>
      (super.noSuchMethod(Invocation.method(#checkPermission, []),
              returnValue: Future<_i4.LocationPermission>.value(
                  _i4.LocationPermission.denied))
          as _i3.Future<_i4.LocationPermission>);
  @override
  double bearing(double? startLatitude, double? startLongitude,
          double? endLatitude, double? endLongitude) =>
      (super.noSuchMethod(
          Invocation.method(#bearing,
              [startLatitude, startLongitude, endLatitude, endLongitude]),
          returnValue: 0.0) as double);
  @override
  _i3.Future<bool> openAppSettings() =>
      (super.noSuchMethod(Invocation.method(#openAppSettings, []),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<_i4.LocationPermission> requestPermission() =>
      (super.noSuchMethod(Invocation.method(#requestPermission, []),
              returnValue: Future<_i4.LocationPermission>.value(
                  _i4.LocationPermission.denied))
          as _i3.Future<_i4.LocationPermission>);
  @override
  _i3.Future<bool> openLocationSettings() =>
      (super.noSuchMethod(Invocation.method(#openLocationSettings, []),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<_i4.Position?> getCurrentPosition(
          {_i4.LocationAccuracy? desiredAccuracy = _i4.LocationAccuracy.best,
          bool? forceAndroidLocationManager = false,
          Duration? timeLimit}) =>
      (super.noSuchMethod(
              Invocation.method(#getCurrentPosition, [], {
                #desiredAccuracy: desiredAccuracy,
                #forceAndroidLocationManager: forceAndroidLocationManager,
                #timeLimit: timeLimit
              }),
              returnValue: Future<_i4.Position?>.value())
          as _i3.Future<_i4.Position?>);
  @override
  _i3.Future<_i4.Position?> getLastKnowPosition(
          {bool? forceAndroidLocationManager = false}) =>
      (super.noSuchMethod(
              Invocation.method(#getLastKnowPosition, [],
                  {#forceAndroidLocationManager: forceAndroidLocationManager}),
              returnValue: Future<_i4.Position?>.value())
          as _i3.Future<_i4.Position?>);
  @override
  String toString() => super.toString();
}
